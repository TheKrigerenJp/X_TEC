package com.example.demoproyecto2;

/**
 * Clase Nodo
 * @author JJD
 * @version 13/05/2023
 */
class Nodo {
    int valor;
    Nodo izquierdo, derecho;

    public Nodo(int valor) {
        this.valor = valor;
        izquierdo = null;
        derecho = null;
    }
}

/**
 * Clase ArbolBinarioBusqueda
 * @author JJD
 * @version 13/05/2023
 */
class ArbolBinarioBusqueda {
    Nodo raiz;


    public ArbolBinarioBusqueda() {
        raiz = null;
    }

    /**
     * Metodo para insertar un valor en el arbol binario, llama a otro metodo el cual tiene la logica para saber donde colocar el valor
     * @param valor Un valor entero el cual es agregado al arbol
     */
    public void insertar(int valor) {
        raiz = insertarRec(raiz, valor);
    }

    /**
     * Metodo Este metodo tiene la logica utilizada para hacer la inserción de valores dentro del arbol, verifica si el arbol  esta vacio, si ya hay raiz entonces nada mas verifica si el valor ingresado es menor o mayor que esta misma
     * @param raiz Parametro que utlizaremos como un nodo raiz
     * @param valor Este entero sera la key que posicionaremos dependiendo de la verificación anterior
     * @return Retornamos la raíz de nuestro arbol
     */
    Nodo insertarRec(Nodo raiz, int valor) {
        if (raiz == null) {
            raiz = new Nodo(valor);
            return raiz;
        }

        if (valor < raiz.valor)
            raiz.izquierdo = insertarRec(raiz.izquierdo, valor);
        else if (valor > raiz.valor)
            raiz.derecho = insertarRec(raiz.derecho, valor);

        return raiz;
    }

    /**
     * Metodo que utilizaremos para la impresión del orden de nuestro arbol, orden izquierdo luego derecho
     * @param nodo recibimos un Nodo como parametro
     */
    public void imprimirOrden(Nodo nodo) {
        if (nodo != null) {
            imprimirOrden(nodo.izquierdo);
            System.out.print(nodo.valor + " ");
            imprimirOrden(nodo.derecho);
        }
    }

    public static void main(String[] args) {
        ArbolBinarioBusqueda arbol = new ArbolBinarioBusqueda();

        arbol.insertar(50);
        arbol.insertar(30);
        arbol.insertar(20);
        arbol.insertar(40);
        arbol.insertar(70);
        arbol.insertar(60);
        arbol.insertar(80);

        arbol.imprimirOrden(arbol.raiz);
    }
}

