package com.example.demoproyecto2;

public class AVL {
    private Node root;

    public Node getRoot() {
        return root;
    }

    public void setRoot(Node root) {
        this.root = root;
    }

    public class Node {


        private static Plato plato;
        private static int height;
        private static Node left;
        private static Node right;

        public static Node getLeft() {
            return left;
        }

        public static void setLeft(Node left) {
            Node.left = left;
        }

        public static Plato getPlato() {
            return plato;
        }

        public static void setPlato(Plato plato) {
            Node.plato = plato;
        }

        public static Node getRight() {
            return right;
        }

        public static void setRight(Node right) {
            Node.right = right;
        }


        public Node(Plato plato) {
            this.plato = plato;
            this.height = 1;
        }
    }





    public void insert(Plato plato) {
        root = insert(root, plato);
    }

    private Node insert(Node node, Plato plato) {
        if (node == null) {
            return new Node(plato);
        }

        if (plato.getId() < node.plato.getId()) {
            node.left = insert(node.left, plato);
        } else if (plato.getId() > node.plato.getId()) {
            node.right = insert(node.right, plato);
        } else {
            // Plato con el mismo ID, no se permite la duplicación
            return node;
        }

        node.height = 1 + Math.max(getHeight(node.left), getHeight(node.right));

        int balance = getBalance(node);

        // Caso de rotación izquierda izquierda
        if (balance > 1 && plato.getId() < node.left.plato.getId()) {
            return rotateRight(node);
        }

        // Caso de rotación derecha derecha
        if (balance < -1 && plato.getId() > node.right.plato.getId()) {
            return rotateLeft(node);
        }

        // Caso de rotación izquierda derecha
        if (balance > 1 && plato.getId() > node.left.plato.getId()) {
            node.left = rotateLeft(node.left);
            return rotateRight(node);
        }

        // Caso de rotación derecha izquierda
        if (balance < -1 && plato.getId() < node.right.plato.getId()) {
            node.right = rotateRight(node.right);
            return rotateLeft(node);
        }

        return node;
    }

    private int getHeight(Node node) {
        if (node == null) {
            return 0;
        }
        return node.height;
    }

    private int getBalance(Node node) {
        if (node == null) {
            return 0;
        }
        return getHeight(node.left) - getHeight(node.right);
    }

    private Node rotateRight(Node node) {
        Node newRoot = node.left;
        Node temp = newRoot.right;

        newRoot.right = node;
        node.left = temp;

        node.height = 1 + Math.max(getHeight(node.left), getHeight(node.right));
        newRoot.height = 1 + Math.max(getHeight(newRoot.left), getHeight(newRoot.right));

        return newRoot;
    }

    private Node rotateLeft(Node node) {
        Node newRoot = node.right;
        Node temp = newRoot.left;

        newRoot.left = node;
        node.right = temp;

        node.height = 1 + Math.max(getHeight(node.left), getHeight(node.right));
        newRoot.height = 1 + Math.max(getHeight(newRoot.left), getHeight(newRoot.right));

        return newRoot;
    }

    // Otros métodos del árbol AVL (eliminar, buscar, etc.) se pueden agregar según sea necesario
}



